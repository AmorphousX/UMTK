name: Package UMTK UI

on:
  workflow_dispatch:
    inputs:
      build_windows:
        description: "Build Windows zip"
        type: boolean
        default: true
      build_macos:
        description: "Build macOS zip"
        type: boolean
        default: true
      build_ubuntu_deb:
        description: "Build Ubuntu .deb"
        type: boolean
        default: true
      build_linux_tar:
        description: "Build Linux tar.gz of source files"
        type: boolean
        default: true
      tag:
        description: "Tag name for the release (leave blank to auto-generate)"
        type: string
        required: false
      release_name:
        description: "Release name (defaults to tag)"
        type: string
        required: false
      prerelease:
        description: "Mark release as pre-release"
        type: boolean
        default: false

jobs:
  build_windows:
    if: ${{ inputs.build_windows == true }}
    runs-on: windows-latest
    defaults:
      run:
        working-directory: UMTK_UI/v1.5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      - name: Build with PyInstaller
        shell: pwsh
        run: |
          pyinstaller --noconfirm --windowed --onefile main.py --name umtk-ui

      - name: Package zip
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path build-artifacts | Out-Null
          Copy-Item -Recurse -Force dist\umtk-ui* build-artifacts\
          Copy-Item -Recurse -Force img, style, lib requirements.txt build-artifacts\
          Compress-Archive -Path build-artifacts\* -DestinationPath umtk-ui-windows.zip

      - name: Upload artifact (Windows zip)
        uses: actions/upload-artifact@v4
        with:
          name: umtk-ui-windows
          path: UMTK_UI/v1.5/umtk-ui-windows.zip

  build_macos:
    if: ${{ inputs.build_macos == true }}
    runs-on: macos-latest
    defaults:
      run:
        working-directory: UMTK_UI/v1.5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller --noconfirm --windowed --onefile main.py --name umtk-ui

      - name: Package zip
        run: |
          mkdir -p build-artifacts
          cp dist/umtk-ui* build-artifacts/ || true
          cp -r img style lib requirements.txt build-artifacts/
          (cd build-artifacts && zip -r ../umtk-ui-macos.zip .)

      - name: Upload artifact (macOS zip)
        uses: actions/upload-artifact@v4
        with:
          name: umtk-ui-macos
          path: UMTK_UI/v1.5/umtk-ui-macos.zip

  build_ubuntu_deb:
    if: ${{ inputs.build_ubuntu_deb == true }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: UMTK_UI/v1.5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller --noconfirm --windowed --onefile main.py --name umtk-ui

      - name: Install fpm
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install --no-document fpm

      - name: Build .deb
        run: |
          mkdir -p deb-root/usr/local/umtk-ui
          cp dist/umtk-ui* deb-root/usr/local/umtk-ui/
          cp -r img style lib requirements.txt deb-root/usr/local/umtk-ui/
          fpm -s dir -t deb -n umtk-ui -v 1.0.0 --prefix=/usr/local/umtk-ui -C deb-root .

      - name: Upload artifact (.deb)
        uses: actions/upload-artifact@v4
        with:
          name: umtk-ui-ubuntu-deb
          path: UMTK_UI/v1.5/*.deb

  build_linux_tar:
    if: ${{ inputs.build_linux_tar == true }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: UMTK_UI/v1.5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create source tar.gz
        run: |
          mkdir -p build-tar
          cp main.py requirements.txt *.ui build-tar/ || true
          cp -r img style lib build-tar/
          tar czf umtk-ui-linux.tar.gz -C build-tar .

      - name: Upload artifact (Linux tar)
        uses: actions/upload-artifact@v4
        with:
          name: umtk-ui-linux-tar
          path: UMTK_UI/v1.5/umtk-ui-linux.tar.gz

  release:
    name: Create GitHub Release and upload assets
    runs-on: ubuntu-latest
    needs: [build_windows, build_macos, build_ubuntu_deb, build_linux_tar]
    if: ${{ always() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Compute tag and name
        id: meta
        run: |
          if [ -n "${{ inputs.tag }}" ]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=ui-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi
          if [ -n "${{ inputs.release_name }}" ]; then
            echo "name=${{ inputs.release_name }}" >> $GITHUB_OUTPUT
          else
            echo "name=${{ steps.meta.outputs.tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ inputs.release_name || steps.meta.outputs.tag }}
          prerelease: ${{ inputs.prerelease }}
          files: |
            artifacts/umtk-ui-windows.zip
            artifacts/umtk-ui-macos.zip
            artifacts/umtk-ui-linux.tar.gz
            artifacts/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}